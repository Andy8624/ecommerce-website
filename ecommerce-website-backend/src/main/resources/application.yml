spring:
  application:
    name: ecommerce

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  kafka:
    bootstrap-servers: localhost:9094
    consumer:
      group-id: ecommerce-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: com.dlk.ecommerce.domain.request.mail

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: -1
      retries: 1
      properties:
        # Prevent duplicate send
        [ enable.idempotence ]: true
        [ max.in.flight.requests.per.connection ]: 5

  # Email Server Configuration
  mail:
    default-encoding: utf-8
    host: smtp.gmail.com
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    port: ${MAIL_PORT}
    protocol: smtp
    test-connection: false
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  data:
    redis:
      port: 6379
      host: localhost

dlk:
  jwt:
    base64-secret: ${JWT_SECRET}
    access-token-validity-in-seconds: ${JWT_ACCESS_TOKEN_VALIDITY}
    refresh-token-validity-in-seconds: ${JWT_REFRESH_TOKEN_VALIDITY}

  upload-file:
    base-uri: ${UPLOAD_FILE_PATH}

ghn:
  api-url: ${GHN_API_URL}
  token: ${GHN_TOKEN}

